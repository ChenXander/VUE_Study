==============基础语法=================================================

1.计算属性：computed都包含一个getter和一个setter，setter一般不用，只用getter进行读取。
          计算属性会进行缓存，如果多次使用时，计算属性只会调用一次，而methods会多次调用，因此计算属性更加高效。

2.v-on参数：情况一：如果该方法不需要额外参数，那么方法后的()可以不添加。但是注意：如果方法本身中有一个参数或没有参数，那么会默认将原生事件event参数传递进去
           情况二：如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件

3.v-on修饰符：.stop--调用event.stopPropagation()。阻止事件冒泡
            .prevent--调用event.preventDefault()。阻止默认事件
            .{keyCode|keyAlias}--只当事件是从特定键触发时才触发回调
            .once--只触发一次回调

4.v-if,
  v-else-if,
  v-else：input输入框--Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。
          解决方案：给对应的input添加key，并且key不相同

5.v-show：v-if当条件为false时，不会有对应的元素在DOM中
         v-show当条件为false时，是将元素的display属性设置为none

         如何选择：当需要在显示与隐藏之间切片很频繁时，使用v-show
                 当只有一次切换时，通过使用v-if

6.v-for：使用时给对应的元素或组件添加 :key 属性，来给每个节点做唯一标识，方便虚拟DOM的Diff算法正确识别节点。
        key的作用是为了高效的更新虚拟DOM

7.检测数组更新：Vue是响应式的，所以当数据发生变化时，Vue会自动检测数据变化，视图会发生对应的更新
             Vue中包含了一组观察数组编译的方法，使用它们改变数组也会触发视图的更新
             但并不是所有的方法都是是响应式的
            常用的响应式的数组方法：push()：数组最后添加元素，可以添加多个，push('a', 'b', 'c')
                                pop()：删除数组最后一个元素
                                shift()：删除数组第一个元素
                                unshift()：在数组最前面添加元素，可以添加多个，unshift('a', 'b', 'c')
                                splice()：删除元素/插入元素/替换元素
                                                splice(start, count, 'a', 'b', 'c')：第一个参数截取数组的索引起点
                                                                                    第二个参数截取数组元素的个数
                                                                                    第三个参数要添加的元素
                                sort()：数组排序
                                reverse()：翻转数组
            vue提供的修改方法：Vue.set(arr, index, 'a')，第一个参数要修改的对象
                                                      第二个参数索引值
                                                      第三个参数修改后的值
            注意：通过索引值直接修改数组不是响应式的

8.v-model：原理：v-model其实是一个语法糖，它的背后本质上是包含两个操作：
                    1).v-bind绑定一个value属性
                    2).v-on指令给当前元素绑定input事件
                    <input type="text" v-model="message">
                    等同于
                    <input type="text" v-bind:value="message" v-on:input="message = $event.target.value">
          v-model:radio(单选框的应用)：通过v-model绑定相同变量数据，实现单选框的互斥以及双向数据绑定，原来的单选框name属性就可以去掉了
          v-model:checkbox(多选框的应用)：
                    分为两种情况：单个勾选框和多个勾选框
                                单个勾选框：v-model即为布尔值，此时input的value并不影响v-model的值。
                                多个复选框：当是多个复选框时，因为可以选中多个，所以对应的data中属性是一个数组。当选中某一个时，就会将input的value添加到数组中。
                    <div id="app">
                        单选框
                        <label for="check">
                            <input type="checkbox" v-model="checked" id="check" >同意协议
                        </label>

                        多选框
                        <input type="checkbox" v-model="hobbies" value="篮球" >篮球
                        <input type="checkbox" v-model="hobbies" value="足球" >足球
                        <input type="checkbox" v-model="hobbies" value="台球" >台球
                    </div>
                    <script>
                        let app = new Vue({
                            el: '#app',
                            data: {
                                checked: false,
                                hobbies: []
                            }
                        })
                    </script>

          input框中的值绑定：在label中进行for循环遍历，通过:value、:id等对input进行值绑定，其实就是v-bind在input框中的应用
          v-model修饰符：
                    lazy修饰符：v-model.lazy让数据在失去焦点或者回车时才会更新
                    number修饰符：v-model.number让在输入框中输入的内容自动转成数字类型
                    trim修饰符：v-model.trim过滤内容左右两边的空格

===============vue组件化！=============================================
组件的使用分成三个步骤：(底层写法) 后续使用语法糖
                1.创建组件构造器：const cpnC = Vue.extend({
                                  template: `<div>
                                                <h2>xxxx</h2>
                                                <p>545446</p>
                                                <p>45545</p>
                                            </div>`
                               })
                2.注册组件：Vue.component('test', cpnC) 全局注册
                3.使用组件：<test /> 注意：必须挂载到根组件内